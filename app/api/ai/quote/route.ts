import {NextResponse} from 'next/server'
const OPENAI_API_KEY=process.env.OPENAI_API_KEY
const OPENAI_MODEL=process.env.OPENAI_MODEL||'gpt-4o-mini'
export const dynamic='force-dynamic'
export async function POST(req){const payload=await req.json().catch(()=>({})); const context=payload?.context||{}; const mock={"price_gbp": 420, "line_items": [{"label": "Base move (3h @ \u00a3110/h)", "amount": 330}, {"label": "Fuel/parking", "amount": 40}, {"label": "Packing materials", "amount": 50}], "terms": ["50% deposit to secure booking", "Rescheduling allowed 48h notice"], "email_subject": "Your moving quote from Battersea Movers", "email_body": "Hi {first_name},\\n\\nThanks for considering us! Based on your details, your quote is \u00a3420..."}; if(!OPENAI_API_KEY) return NextResponse.json({source:'mock',...mock}); const sys=`You are an expert operations assistant for a London moving company. Return STRICT JSON for the quote task.`; const user=JSON.stringify(context); try{ const r=await fetch('https://api.openai.com/v1/chat/completions',{method:'POST',headers:{Authorization:`Bearer ${OPENAI_API_KEY}`,'Content-Type':'application/json'},body:JSON.stringify({model:OPENAI_MODEL,temperature:0.2,response_format:{type:'json_object'},messages:[{role:'system',content:sys},{role:'user',content:user}]})}); const j=await r.json(); const c=j.choices?.[0]?.message?.content; try{ return NextResponse.json(JSON.parse(c)) }catch{ return NextResponse.json({source:'mock_fallback',...mock}) } }catch(e){ return NextResponse.json({source:'mock_error',...mock}) } }